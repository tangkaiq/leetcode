1.Brute Force
Time:O(n^2)
Space:O(1)

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        //Invalid cases
        if(nums.length<0 || nums==null) throw new IllegalArgumentException ("Invalid input");
        for(int i=0;i<nums.length;i++){
            for(int j=i;j<nums.length;j++){
                if(nums[i]+nums[j]==target && i!=j) return new int[]{i,j}; 
            }
        }
        throw new RuntimeException("No solution");
    }
}



2.HashMap
Time:O(n)
Space:O(n)

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        //Invalid cases
        if(nums.length<0 || nums==null) throw new IllegalArgumentException ("Invalid input");
        //Store (NumberRequired,Index) as a map
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])) return new int[]{map.get(nums[i]),i};
            else map.put(target-nums[i],i);
        }
        throw new RuntimeException("No solution");
    }
}



